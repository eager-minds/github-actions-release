name: "Github Release"
author: "Eager Minds"
branding:
  icon: "package"
  color: "green"
description: "Generate GitHub release for a tag"

inputs:
  tag_name:
    description: "The tag name"
    required: true
  release_name:
    description: "The name of the release to publish"
    required: true
  release_description:
    description: "Release description"
    required: false
  changelog_path:
    description: "Changelog file path to get release description"
    required: false
outputs:
  release_url:
    description: "Created release URL"
    value: ${{ steps.release.outputs.release_url }}

runs:
  using: 'composite'
  steps:
    - name: "Set env variables from inputs"
      shell: bash
      env:
        TAG_NAME: "${{ inputs.tag_name }}"
        RELEASE_NAME: ${{ inputs.release_name }}
        CHANGELOG_PATH: ${{ inputs.changelog_path }}
      run: "setting up environment variables from inputs"

    - name: Set CHANGELOG_TAG_FORMAT using TAG_FORMAT
      if: env.CHANGELOG_TAG_FORMAT == ''
      shell: bash
      run: echo "CHANGELOG_TAG_FORMAT=^## \\[$TAG_FORMAT\\]" >> $GITHUB_ENV
    - name: Set TAG_NAME from CHANGELOG
      if: env.TAG_NAME == ''
      shell: bash
      run: |
        tag_name=$(grep -Eo "$CHANGELOG_TAG_FORMAT" $CHANGELOG_PATH | head -1 | grep -Eo "$TAG_FORMAT")
        echo "TAG_NAME=$tag_name" >> $GITHUB_ENV
    - name: Set RELEASE_NAME using TAG_NAME
      if: env.RELEASE_NAME == ''
      shell: bash
      run: echo "RELEASE_NAME=Release v${{ env.TAG_NAME }}" >> $GITHUB_ENV

    - id: tag
      name: Tag ${{ env.TAG_NAME }}
      shell: bash
      run: |
        git tag -a -m ${{ env.TAG_NAME }} ${{ env.TAG_NAME }}
        git push origin ${{ env.TAG_NAME }}
        echo "tag_pushed=true" >> $GITHUB_OUTPUT

    - name: "Set Input Release Description"
      if: inputs.release_description != ''
      shell: bash
      run: echo "RELEASE_DESCRIPTION=${{ inputs.release_description }}" >> $GITHUB_ENV
    - name: "Get release description from changelog file"
      if: inputs.changelog_path != '' && env.RELEASE_DESCRIPTION == ''
      shell: bash
      env:
        CHANGELOG_PATH: ${{ inputs.changelog_path }}
      run: |
        release_description="$($GITHUB_ACTION_PATH/generate-changelog.sh)"
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "RELEASE_DESCRIPTION<<$EOF" >> $GITHUB_ENV
        echo "$release_description" >> $GITHUB_ENV
        echo "$EOF" >> $GITHUB_ENV
    - id: release
      name: Release
      shell: bash
      env:
        RELEASE_NAME: "${{ inputs.release_name }}"
      run: |
        release_url=$(gh release create "${{ env.TAG_NAME }}" -t "${{ env.RELEASE_NAME }}" --notes "${{ env.RELEASE_DESCRIPTION }}" --verify-tag)
        echo "release_url=$release_url" >> $GITHUB_OUTPUT

    - name: Control release failure
      if: ${{ failure() && steps.tag.outputs.tag_pushed }}
      shell: bash
      run: git push --delete origin ${{ env.TAG_NAME }}