name: "Github Release"
author: "Eager Minds"
branding:
  icon: "package"
  color: "green"
description: "Generate GitHub release for a tag"

inputs:
  token:
    description: "The Github access token"
    required: true
  release_version:
    description: "The tag name, required if missing changelog file"
    required: false
  release_version_format:
    description: "Release version format"
    required: false
    default: "[0-9]+\\.[0-9]+\\.[0-9]+"
  release_version_delimiter:
    description: "Release version delimiter"
    required: false
    default: '.'
  tag_name:
    description: "The name of the release tag, defaults to \"v${RELEASE_VERSION}\""
    required: false
  release_name:
    description: "The name of the release to publish, defaults to \"${TAG_NAME}\""
    required: false
  skip_tag_zero:
    description: "If true skips minor and major tag generation when its value is zero. Example: 'v0', 'v0.0'"
    required: false
    default: "false"
  tag_major:
    description: "If true generates/overwrites tag of major version, default to false"
    required: false
    default: "false"
  tag_minor:
    description: "If true generates/overwrites tag of minor version, default to false"
    required: false
    default: "false"
  release_description:
    description: "Release description. By default it is obtained from changelog file or blank"
    required: false
  disable_changelog:
    description: "If true disables changelog parsing. By default latest release tag and changelog_description are obtained from changelog file"
    required: false
  changelog_path:
    description: "Changelog file path to get release description"
    required: false
    default: "CHANGELOG.md"
  changelog_release_version_format:
    description: "Changelog tag format, defaults to \"^## \\[$release_version_format\\]\""
    required: false
outputs:
  release_url:
    description: "Created release URL"
    value: ${{ steps.release.outputs.release_url }}

runs:
  using: 'composite'
  steps:
    - name: "Set env variables from inputs"
      shell: bash
      run: |
        echo "GITHUB_TOKEN=${{ inputs.token }}" >> $GITHUB_ENV
        echo "RELEASE_VERSION=${{ inputs.release_version }}" >> $GITHUB_ENV
        echo "TAG_NAME=${{ inputs.tag_name }}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${{ inputs.release_name }}" >> $GITHUB_ENV
        echo "CHANGELOG_PATH=${{ inputs.changelog_path }}" >> $GITHUB_ENV
        echo "CHANGELOG_RELEASE_VERSION_FORMAT=${{ inputs.changelog_release_version_format }}" >> $GITHUB_ENV
        echo "RELEASE_DESCRIPTION=${{ inputs.release_description }}" >> $GITHUB_ENV

    - name: Set CHANGELOG_RELEASE_VERSION_FORMAT using defaults
      if: env.CHANGELOG_RELEASE_VERSION_FORMAT == ''
      shell: bash
      run: echo "CHANGELOG_RELEASE_VERSION_FORMAT=^## \\[${{ inputs.release_version_format }}\\]" >> $GITHUB_ENV

    - name: Get latest release_version from CHANGELOG
      if: env.RELEASE_VERSION == '' && !inputs.disable_changelog
      shell: bash
      run: |
        release_version=$(grep -Eo "${{ env.CHANGELOG_RELEASE_VERSION_FORMAT }}" "${{ inputs.changelog_path }}" | head -1 | grep -Eo "${{ inputs.release_version_format }}")
        echo "RELEASE_VERSION=$release_version" >> $GITHUB_ENV

    - name: Set TAG_NAME using default
      if: env.TAG_NAME == ''
      shell: bash
      run: echo "TAG_NAME=v${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV

    - name: Set RELEASE_NAME using default
      if: env.RELEASE_NAME == ''
      shell: bash
      run: echo "RELEASE_NAME=${{ env.TAG_NAME }}" >> $GITHUB_ENV

    - id: tag
      name: Tag ${{ env.TAG_NAME }} and get major and minor release versions
      shell: bash
      run: |
        git tag -a -m "${{ env.TAG_NAME }}" "${{ env.TAG_NAME }}"
        git push origin "${{ env.TAG_NAME }}"
        echo "release_major_version="$(echo "${{ env.RELEASE_VERSION }}" | cut -d ${{ inputs.release_version_delimiter }} -f 1) >> $GITHUB_OUTPUT
        echo "release_minor_version="$(echo "${{ env.RELEASE_VERSION }}" | cut -d ${{ inputs.release_version_delimiter }} -f 2) >> $GITHUB_OUTPUT
        echo "tag_pushed=true" >> $GITHUB_OUTPUT

    - id: tag_major
      name: Tag major from ${{ env.RELEASE_VERSION }}
      if: inputs.tag_major == 'true' && inputs.skip_tag_zero != 'true' || steps.tag.outputs.release_major_version != '0'
      shell: bash
      run: |
        tag_name_major="v${{ steps.tag.outputs.release_major_version }}"
        git tag -fa -m "$tag_name_major" "$tag_name_major"

    - id: tag_minor
      name: Tag minor from ${{ env.RELEASE_VERSION }}
      if: inputs.tag_minor == 'true' && inputs.skip_tag_zero != 'true' || steps.tag.outputs.release_minor_version != '0'
      shell: bash
      run: |
        tag_name_minor="v${{ steps.tag.outputs.release_major_version }}${{ inputs.release_version_delimiter }}${{ steps.tag.outputs.release_minor_version }}"
        git tag -fa -m "$tag_name_minor" "$tag_name_minor"

    - name: "Save release description to ${RELEASE_VERSION}_changelog file"
      if: env.RELEASE_DESCRIPTION != ''
      shell: bash
      run: echo ${{ env.RELEASE_DESCRIPTION }} > "${{ env.RELEASE_VERSION }}.changelog"

    - shell: bash
      run: echo ${{ github.workspace }}

    - name: "Save release description to ${RELEASE_VERSION}_changelog file"
#    - name: "Get release description from changelog file"
      if: env.RELEASE_DESCRIPTION == '' && !inputs.disable_changelog
      shell: bash
      run: |
        release_description="$($GITHUB_ACTION_PATH/generate-changelog.sh)"
        echo "$release_description" > "${{ env.RELEASE_VERSION }}.changelog"

    - id: release
      name: Release
      shell: bash
      run: |
        release_url=$(gh release create "${{ env.TAG_NAME }}" -t "${{ env.TAG_NAME }}" -F "${{ env.RELEASE_VERSION }}.changelog" --verify-tag)
        echo "release_url=$release_url" >> $GITHUB_OUTPUT

    - id: push_tags
      name: Push all pending tags
      shell: bash
      run: git push origin --tags -f

    - name: Control release failure
      if: ${{ failure() && steps.tag.outputs.tag_pushed }}
      shell: bash
      run: git push --delete origin "${{ env.TAG_NAME }}"