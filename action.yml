name: "Github Release"
author: "Eager Minds"
branding:
  icon: "package"
  color: "green"
description: "Generate GitHub release for a tag"

inputs:
  token:
    description: "The Github access token"
    required: true
  tag_name:
    description: "The tag name, required if missing changelog file"
    required: false
  tag_format:
    description: "Tag format"
    required: false
    default: "[0-9]+\\.[0-9]+\\.[0-9]+"
  release_name:
    description: "The name of the release to publish, defaults to \"Release v$TAG_NAME\""
    required: false
  release_description:
    description: "Release description. By default it is obtained from changelog file or blank"
    required: false
  disable_changelog:
    description: "If true disables changelog parsing. By default latest release tag and changelog_description are obtained from changelog file"
    required: false
  changelog_path:
    description: "Changelog file path to get release description"
    required: false
    default: "CHANGELOG.md"
  changelog_tag_format:
    description: "Changelog tag format, defaults to \"^## \\[$tag_format\\]\""
    required: false
outputs:
  release_url:
    description: "Created release URL"
    value: ${{ steps.release.outputs.release_url }}

runs:
  using: 'composite'
  steps:
    - name: "Set env variables from inputs"
      shell: bash
      run: |
        echo "GITHUB_TOKEN=${{ inputs.token }}" >> $GITHUB_ENV
        echo "TAG_NAME=${{ inputs.tag_name }}" >> $GITHUB_ENV
        echo "RELEASE_NAME=${{ inputs.release_name }}" >> $GITHUB_ENV
        echo "CHANGELOG_PATH=${{ inputs.changelog_path }}" >> $GITHUB_ENV
        echo "CHANGELOG_TAG_FORMAT=${{ inputs.changelog_tag_format }}" >> $GITHUB_ENV
        echo "RELEASE_DESCRIPTION=${{ inputs.release_description }}" >> $GITHUB_ENV

    - name: Set CHANGELOG_TAG_FORMAT using TAG_FORMAT
      if: env.CHANGELOG_TAG_FORMAT == ''
      shell: bash
      run: echo "CHANGELOG_TAG_FORMAT=^## \\[${{ inputs.tag_format }}\\]" >> $GITHUB_ENV

    - name: Set TAG_NAME from CHANGELOG
      if: env.TAG_NAME == '' && !inputs.disable_changelog
      shell: bash
      run: |
        tag_name=$(grep -Eo "${{ env.CHANGELOG_TAG_FORMAT }}" ${{ inputs.changelog_path }} | head -1 | grep -Eo "${{ inputs.tag_format }}")
        echo "TAG_NAME=$tag_name" >> $GITHUB_ENV

    - name: Set RELEASE_NAME using TAG_NAME
      if: env.RELEASE_NAME == ''
      shell: bash
      run: echo "RELEASE_NAME=Release v${{ env.TAG_NAME }}" >> $GITHUB_ENV

    - id: tag
      name: Tag v${{ env.TAG_NAME }}
      shell: bash
      run: |
        git tag -a -m "v${{ env.TAG_NAME }}" "v${{ env.TAG_NAME }}"
        git push origin "v${{ env.TAG_NAME }}"
        echo "tag_pushed=true" >> $GITHUB_OUTPUT

    - name: "Save release description to ${tag_name}_changelog file"
      if: env.RELEASE_DESCRIPTION != ''
      shell: bash
      run: echo ${{ env.RELEASE_DESCRIPTION }} > "v${{ env.TAG_NAME }}.changelog"

    - name: "Save release description to ${tag_name}_changelog file"
#    - name: "Get release description from changelog file"
      if: env.RELEASE_DESCRIPTION == '' && !inputs.disable_changelog
      shell: bash
      run: |
        release_description="$($GITHUB_ACTION_PATH/generate-changelog.sh)"
        echo "$release_description" > "v${{ env.TAG_NAME }}.changelog"
    - id: release
      name: Release
      shell: bash
      run: |
        release_url=$(gh release create "v${{ env.TAG_NAME }}" -t "${{ env.RELEASE_NAME }}" -F "v${{ env.TAG_NAME }}.changelog" --verify-tag)
        echo "release_url=$release_url" >> $GITHUB_OUTPUT

    - name: Control release failure
      if: ${{ failure() && steps.tag.outputs.tag_pushed }}
      shell: bash
      run: git push --delete origin "v${{ env.TAG_NAME }}"